<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.server.mappers.userMapper"><!--这里填写mapper接口的全类名-->
    <!--
            sql语句的查询标签必须设置resultType或者resultMap属性
            resultType：设置默认的映射关系，设置把查询结果转换成哪个类的对象,但类的属性名必须与表中的字段名保持一致
            resultMap：设置自定义的映射关系(用于表中的字段名与类的属性名不一致的时候使用)
        -->
    <!--登录-->
    <select id="login" resultType="com.example.server.entity.user">/*不使用类型别名*/
    select *
    from user
    where username = #{username}
      and password = #{password}
    </select>
    <!--添加联系人-->
    <update id="addContact">
        update user
        set contact = #{contact}
        where username = #{username}
    </update>
    <!--根据用户名查询用户-->
    <select id="queryUser" resultType="com.example.server.entity.user">/*不使用类型别名*/
    select *
    from user
    where username = #{username}
    </select>
    <!--根据id添加聊天记录-->
    <update id="addChatLog">
        update user
        set chatLog = #{chatLog}
        where id = #{id}
    </update>
    <!--根据id查询用户的聊天记录-->
    <select id="queryChatLog" resultType="String">/*不使用类型别名*/
    select chatLog
    from user
    where id = #{id}
    </select>
    <!--根据id查询用户名和头像地址，用于添加联系人前的查询用户-->
    <select id="idQueryUser" resultType="com.example.server.entity.user">/*不使用类型别名*/
    select username, profilePhoto
    from user
    where id = #{id}
    </select>
    <!--根据id查询用户除密码联系人聊天记录外的信息-->
    <select id="idQueryUser2" resultType="com.example.server.entity.user">/*不使用类型别名*/
    select username, profilePhoto, id
    from user
    where id = #{id}
    </select>
    <!--根据id查询用户的联系人列表-->
    <select id="idQueryContact" resultType="String">/*不使用类型别名*/
    select contact
    from user
    where id = #{id}
    </select>
</mapper>