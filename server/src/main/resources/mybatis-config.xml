<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--mybatis核心配置文件-->
<!--
    核心配置文件中的标签必须按照固定的顺序：
        properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
        reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?
-->
<configuration>
    <!--引入properties文件，此时就可以${属性名}的方式访问属性值-->
    <properties resource="jdbc.properties"/>
    <!--
        typeAlias：设置某个具体的类型的别名
        属性：
            type：需要设置别名的类型的全类名
            alias：设置此类型的别名，若不设置此属性，该类型拥有默认的别名，即：类名且不区分大小写
                   若设置此属性，此时该类型的别名只能使用alias所设置的值
    -->
    <!--<typeAliases>
        <typeAlias type="mybatis.数据库表的实体类" alias="aaa"/>
        &lt;!&ndash;package：以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写&ndash;&gt;
        &lt;!&ndash;<package name="包名"/>&ndash;&gt;
    </typeAliases>-->
    <!--设置连接数据库的环境-->
    <!--
        environments：设置多个连接数据库的环境
        属性：default：设置默认使用的环境的id
    -->
    <environments default="development">
        <!--
            environment：设置具体的连接数据库的环境信息
            属性：id：设置环境的唯一标识，不可重复
        -->
        <environment id="development">
            <!--
                transactionManager：设置事务管理方式
                属性：
                    type：设置事务管理方式
                        type="JDBC"：设置当前环境的事务管理都必须手动处理(原生jdbc的事务管理方式)
                        type="MANAGED"：设置事务被管理，例如让spring中的AOP去管理
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource：设置数据源的类型
                属性：
                type：设置数据源的类型
                    type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建
                    type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建
                    type="JNDI"：调用上下文中的数据源
            -->
            <dataSource type="POOLED">
                <!--设置驱动类的全类名-->
                <property name="driver" value="${jdbc.driverClassName}"/>
                <!--设置连接数据库的连接地址-->
                <property name="url" value="${jdbc.url}"/>
                <!--设置连接数据库的用户名-->
                <property name="username" value="${jdbc.username}"/>
                <!--设置连接数据库的密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--引入映射文件-->
    <mappers>
        <mapper resource="mappers/userMapper.xml"/>
        <!--
            package：以包为单位，将包下所有的映射文件引入核心配置文件
            注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下(包名一致即可，同名包放在不同目录下也算同一个包)
                 并且mapper接口和mapper映射文件名字要相同
        -->
        <!--<package name="包名"/>-->
    </mappers>

</configuration>
